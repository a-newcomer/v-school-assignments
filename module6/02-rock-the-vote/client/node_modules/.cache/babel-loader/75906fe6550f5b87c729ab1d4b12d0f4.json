{"ast":null,"code":"var _jsxFileName = \"/Users/student/development/assignments/module6/02-rock-the-vote/client/src/context/ControversyProvider.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport controversy from '../../../models/controversy';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ReviewContext = /*#__PURE__*/React.createContext(); //Here we want to create a header to hold our token to get controversies by user\n//we create our own instance of axios\n\nconst userAxios = axios.create(); //then we add the Authorization and bearer stuff to it, in the request\n\nuserAxios.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  config.headers.Authorization = `Bearer ${token}`;\n  return config;\n});\nconst initialState = {\n  //controversies: [],\n  comments: [],\n  upVotes: 0,\n  downVotes: 0\n};\nconst [reviewState, setReviewState] = useState(initialState); // function addReview(newReview) {\n//   //the userAxios has the token in it now\n//   userAxios.post(\"/api/controversies\", newReview)\n//   .then(res => {\n//     setUserState(prevState => ({\n//       ...prevState,\n//       controversies: [ ...prevState.controversies, newReview]\n//     }))\n//   })\n//   .catch(err => console.log(err.response.data.errMsg))\n// }\n\nexport default function ControversyProvider(props) {\n  return /*#__PURE__*/_jsxDEV(ControversyContext.Provider, {\n    value: { ...reviewState\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_c = ControversyProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ControversyProvider\");","map":{"version":3,"sources":["/Users/student/development/assignments/module6/02-rock-the-vote/client/src/context/ControversyProvider.js"],"names":["React","useState","useEffect","axios","controversy","ReviewContext","createContext","userAxios","create","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","initialState","comments","upVotes","downVotes","reviewState","setReviewState","ControversyProvider","props","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;;AAEA,OAAO,MAAMC,aAAa,gBAAGL,KAAK,CAACM,aAAN,EAAtB,C,CAGP;AACA;;AACA,MAAMC,SAAS,GAAGJ,KAAK,CAACK,MAAN,EAAlB,C,CAEA;;AACAD,SAAS,CAACE,YAAV,CAAuBC,OAAvB,CAA+BC,GAA/B,CAAmCC,MAAM,IAAI;AAC3C,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACFH,EAAAA,MAAM,CAACI,OAAP,CAAeC,aAAf,GAAgC,UAASJ,KAAM,EAA/C;AACA,SAAOD,MAAP;AACC,CAJD;AAMA,MAAMM,YAAY,GAAG;AACnB;AACAC,EAAAA,QAAQ,EAAE,EAFS;AAGnBC,EAAAA,OAAO,EAAE,CAHU;AAInBC,EAAAA,SAAS,EAAE;AAJQ,CAArB;AAMA,MAAM,CAAEC,WAAF,EAAeC,cAAf,IAAiCtB,QAAQ,CAACiB,YAAD,CAA/C,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASM,mBAAT,CAA6BC,KAA7B,EAAoC;AAEjD,sBACE,QAAC,kBAAD,CAAoB,QAApB;AACE,IAAA,KAAK,EAAE,EACL,GAAGH;AADE,KADT;AAAA,cAIGG,KAAK,CAACC;AAJT;AAAA;AAAA;AAAA;AAAA,UADF;AASD;KAXuBF,mB","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport controversy from '../../../models/controversy'\n\nexport const ReviewContext = React.createContext()\n\n\n//Here we want to create a header to hold our token to get controversies by user\n//we create our own instance of axios\nconst userAxios = axios.create()\n\n//then we add the Authorization and bearer stuff to it, in the request\nuserAxios.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\")\nconfig.headers.Authorization = `Bearer ${token}`\nreturn config\n})\n\nconst initialState = {\n  //controversies: [],\n  comments: [],\n  upVotes: 0,\n  downVotes: 0\n}\nconst [ reviewState, setReviewState] = useState(initialState)\n\n// function addReview(newReview) {\n//   //the userAxios has the token in it now\n//   userAxios.post(\"/api/controversies\", newReview)\n//   .then(res => {\n//     setUserState(prevState => ({\n//       ...prevState,\n//       controversies: [ ...prevState.controversies, newReview]\n//     }))\n//   })\n//   .catch(err => console.log(err.response.data.errMsg))\n// }\n\nexport default function ControversyProvider(props) {\n\n  return (\n    <ControversyContext.Provider\n      value={{\n        ...reviewState,\n      }} >\n      {props.children}\n    </ControversyContext.Provider>\n  )\n\n}"]},"metadata":{},"sourceType":"module"}